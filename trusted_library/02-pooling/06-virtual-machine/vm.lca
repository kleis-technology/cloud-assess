datasource vm_inventory {
    location = "02-pooling/vm_inventory.csv"
    schema {
        id = "vm-01"
        pool_id = "client_vm"
        service_id = "svc"
        quantity = 1 p

        // assumption: reported values during period `timewindow`
        vcpu_size = 1 vCPU
        ram_size = 4 GB
        storage_size = 20 GB
    }
}

/*
ENTRYPOINT
*/

process vm_fn {
    params {
        id = "vm-01"
        total_vcpu = sum( vm_inventory match pool_id = "client_vm", quantity * vcpu_size )
        total_ram = sum( vm_inventory match pool_id = "client_vm", quantity * ram_size )
        total_storage = sum( vm_inventory match pool_id = "client_vm", quantity * storage_size )
    }
    products {
        timewindow vm
    }
    inputs {
        timewindow vm from vm_fn( id = id, lc_step = "manufacturing",
                      total_vcpu = total_vcpu, total_ram = total_ram, total_storage = total_storage
                      ) match ( phase = "embodied" )
        timewindow vm from vm_fn( id = id, lc_step = "transport",
                      total_vcpu = total_vcpu, total_ram = total_ram, total_storage = total_storage
                      ) match ( phase = "embodied" )
        timewindow vm from vm_fn( id = id,
                      total_vcpu = total_vcpu, total_ram = total_ram, total_storage = total_storage
                      ) match ( phase = "use" )
        timewindow vm from vm_fn( id = id, lc_step = "end-of-life",
                      total_vcpu = total_vcpu, total_ram = total_ram, total_storage = total_storage
                      ) match ( phase = "embodied" )
    }
}

/*
PER LC STEP
*/

process vm_fn {
    labels {
        phase = "embodied"
    }
    params {
        id = "vm-01"
        lc_step = "manufacturing"
        total_vcpu = sum( vm_inventory match pool_id = "client_vm", quantity * vcpu_size )
        total_ram = sum( vm_inventory match pool_id = "client_vm", quantity * ram_size )
        total_storage = sum( vm_inventory match pool_id = "client_vm", quantity * storage_size )
    }
    variables {
        data = lookup vm_inventory match id = id
    }
    products {
        timewindow vm
    }

    inputs {
        data.ram_size ram from vm_pool_equipment( id = data.pool_id,
                          total_vcpu = total_vcpu, total_ram = total_ram, total_storage = total_storage
                          ) match ( lc_step = lc_step )
        data.vcpu_size vcpu from vm_pool_equipment( id = data.pool_id,
                            total_vcpu = total_vcpu, total_ram = total_ram, total_storage = total_storage
                            ) match ( lc_step = lc_step )
        data.storage_size storage from vm_pool_equipment( id = data.pool_id,
                                  total_vcpu = total_vcpu, total_ram = total_ram, total_storage = total_storage
                                  ) match ( lc_step = lc_step )
    }
}

process vm_fn {
    labels {
        phase = "use"
    }
    params {
        id = "vm-01"
        total_vcpu = sum( vm_inventory match pool_id = "client_vm", quantity * vcpu_size )
        total_ram = sum( vm_inventory match pool_id = "client_vm", quantity * ram_size )
        total_storage = sum( vm_inventory match pool_id = "client_vm", quantity * storage_size )
    }
    variables {
        data = lookup vm_inventory match id = id
    }
    products {
        timewindow vm
    }

    inputs {
        data.ram_size ram from vm_pool_equipment( id = data.pool_id,
                          total_vcpu = total_vcpu, total_ram = total_ram, total_storage = total_storage
                          ) match ( lc_step = phase )
        data.vcpu_size vcpu from vm_pool_equipment( id = data.pool_id,
                            total_vcpu = total_vcpu, total_ram = total_ram, total_storage = total_storage
                            ) match ( lc_step = phase )
        data.storage_size storage from vm_pool_equipment( id = data.pool_id,
                                  total_vcpu = total_vcpu, total_ram = total_ram, total_storage = total_storage
                                  ) match ( lc_step = phase )
    }
}
