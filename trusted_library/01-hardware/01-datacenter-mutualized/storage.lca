process mutualized_storage_pool {
    labels {
        phase = "embodied"
    }
    params {
        dc_id = "dc-01"
        lc_step = "manufacturing"
    }
    variables {
        dt = 1 hour
        mutualized_pool_id = "mutualized"
        dc = lookup dc_inventory match ( id = dc_id )
    }
    products {
        dt mutualized_storage_pool
    }
    inputs {
        for_each storage from storage_inventory match ( pool_id = mutualized_pool_id, dc_id = dc_id ) {
            storage.quantity * dt mutualized_storage from mutualized_storage_fn( id = storage.id, lc_step = lc_step ) match ( phase = "embodied" )
        }
    }
}

process mutualized_storage_pool {
    labels {
        phase = "use"
    }
    params {
        dc_id = "dc-01"
    }
    variables {
        dt = 1 hour
        mutualized_pool_id = "mutualized"
        dc = lookup dc_inventory match ( id = dc_id )
    }
    products {
        dt mutualized_storage_pool
    }
    inputs {
        for_each storage from storage_inventory match ( pool_id = mutualized_pool_id, dc_id = dc_id ) {
            storage.quantity * dt mutualized_storage from mutualized_storage_fn( id = storage.id ) match ( phase = "use" )
        }
    }
}

/*
The models in this file represent an equipment that is internal to the cloud provider.
I.e., this equipment is not directly serviced to its customers, but is mutualized.
*/

process mutualized_storage_fn {
    labels {
        phase = "embodied"
    }
    params {
        id = "mutualized-sto-01"
        lc_step = "manufacturing"
    }
    variables {
        data = lookup storage_inventory match ( id = id )
        dt = data.lifespan
    }
    products {
        dt mutualized_storage
    }
    inputs {
        data.power * dt datacenter from datacenter_fn( id = data.dc_id, lc_step = lc_step ) match ( phase = phase )
    }
    impacts {
        // assumption: impacts reported for the time period dt
        for_each impact from storage_impacts match ( hw_id = id, lc_step = lc_step ) {
            impact.ADPe ADPe
            impact.ADPf ADPf
            impact.AP AP
            impact.CTUe CTUe
            impact.CTUh_c CTUh_c
            impact.CTUh_nc CTUh_nc
            impact.Epf Epf
            impact.Epm Epm
            impact.Ept Ept
            impact.GWP GWP
            impact.GWPb GWPb
            impact.GWPf GWPf
            impact.GWPlu GWPlu
            impact.IR IR
            impact.LU LU
            impact.ODP ODP
            impact.PM PM
            impact.POCP POCP
            impact.WU WU
            impact.TPE TPE

            // markers
            impact.ADPe ADPe_mutualized_storage
            impact.ADPf ADPf_mutualized_storage
            impact.AP AP_mutualized_storage
            impact.CTUe CTUe_mutualized_storage
            impact.CTUh_c CTUh_c_mutualized_storage
            impact.CTUh_nc CTUh_nc_mutualized_storage
            impact.Epf Epf_mutualized_storage
            impact.Epm Epm_mutualized_storage
            impact.Ept Ept_mutualized_storage
            impact.GWP GWP_mutualized_storage
            impact.GWPb GWPb_mutualized_storage
            impact.GWPf GWPf_mutualized_storage
            impact.GWPlu GWPlu_mutualized_storage
            impact.IR IR_mutualized_storage
            impact.LU LU_mutualized_storage
            impact.ODP ODP_mutualized_storage
            impact.PM PM_mutualized_storage
            impact.POCP POCP_mutualized_storage
            impact.WU WU_mutualized_storage
            impact.TPE TPE_mutualized_storage
        }
    }
}

process mutualized_storage_fn {
    labels {
        phase = "use"
    }
    params {
        id = "mutualized-sto-01"
    }
    variables {
        data = lookup storage_inventory match ( id = id )
        lc_step = "use"
        dt = 1 year
        dc = lookup dc_inventory match ( id = data.dc_id )
    }
    products {
        dt mutualized_storage
    }
    inputs {
        data.power * dt electricity from electricity_production( geo = dc.geo, target = "mutualized_storage" )
        data.power * dt datacenter from datacenter_fn( id = data.dc_id ) match ( phase = phase )
        dt * maintenance_intensity maintenance from maintenance
    }
    impacts {
        // assumption: impacts reported for the time period dt
        for_each impact from storage_impacts match ( hw_id = id, lc_step = lc_step ) {
            impact.ADPe ADPe
            impact.ADPf ADPf
            impact.AP AP
            impact.CTUe CTUe
            impact.CTUh_c CTUh_c
            impact.CTUh_nc CTUh_nc
            impact.Epf Epf
            impact.Epm Epm
            impact.Ept Ept
            impact.GWP GWP
            impact.GWPb GWPb
            impact.GWPf GWPf
            impact.GWPlu GWPlu
            impact.IR IR
            impact.LU LU
            impact.ODP ODP
            impact.PM PM
            impact.POCP POCP
            impact.WU WU
            impact.TPE TPE

            // markers
            impact.ADPe ADPe_mutualized_storage
            impact.ADPf ADPf_mutualized_storage
            impact.AP AP_mutualized_storage
            impact.CTUe CTUe_mutualized_storage
            impact.CTUh_c CTUh_c_mutualized_storage
            impact.CTUh_nc CTUh_nc_mutualized_storage
            impact.Epf Epf_mutualized_storage
            impact.Epm Epm_mutualized_storage
            impact.Ept Ept_mutualized_storage
            impact.GWP GWP_mutualized_storage
            impact.GWPb GWPb_mutualized_storage
            impact.GWPf GWPf_mutualized_storage
            impact.GWPlu GWPlu_mutualized_storage
            impact.IR IR_mutualized_storage
            impact.LU LU_mutualized_storage
            impact.ODP ODP_mutualized_storage
            impact.PM PM_mutualized_storage
            impact.POCP POCP_mutualized_storage
            impact.WU WU_mutualized_storage
            impact.TPE TPE_mutualized_storage
        }
    }
}
